resizeBigtext = (event, ui) ->
  console.log 'loaded resizeBigtext '
  $this=$(this)
  mySize= parseFloat($this.css("font-size").replace("px",""))    
  console.log 'mySize: '+mySize
  console.log 'thisresizeBigtext: '+$this[0].scrollHeight
  console.log 'this.height: '+$this.height()
  
  overFlowVertical = -> 
    actualHeight=$this[0].scrollHeight
    distanceFromEdge=$this.height()-actualHeight 
    
    console.log 'actualHeight: '+actualHeight
    console.log 'distanceFromEdge: '+distanceFromEdge
  
    if(distanceFromEdge < -5)
      return true;
    else
      return false;
  
  $this.children().each ->
    if $(this).css("font-size").match("px")
      childSize=parseFloat($(this).css("font-size").replace("px",""))
      relative=childSize/mySize
      $(this).css("font-size",relative*100+"%")
     
  options={}
  settings = $.extend({
   compressor:0.5
   'minFontSize' : Number.NEGATIVE_INFINITY
   'maxFontSize' : Number.POSITIVE_INFINITY
  },options)
       
  fontSizeWidth=Math.max(
    Math.min(
        $this.width()/(settings.compressor*10), 
        parseFloat(settings.maxFontSize)
        ), 
    parseFloat(settings.minFontSize)
  )

  fontSize=fontSizeWidth
  $this.css('font-size', fontSize)
  
  while(overFlowVertical())
    fontSize=fontSize*0.9
    $this.css('font-size', fontSize)

setLineHeight = (element_style_id_val, line_height_val) ->
  $.post "/element_styles/"+element_style_id_val,
    { _method:'PUT', element_style : {line_height: line_height_val} }
    (data)-> 
      console.log "[hlines.js] element line height saved"
    'json'
    
setLetterSpacing = (element_style_id_val, letter_spacing_val) ->
  $.post "/element_styles/"+element_style_id_val,
    { _method:'PUT', element_style : {letter_spacing: letter_spacing_val} }
    (data)-> 
      console.log "[hlines.js] element letter spacing saved"
    'json'

setFontSize = (element_style_id_val, font_size_val) ->
  $.post "/element_styles/"+element_style_id_val,
    { _method:'PUT', element_style : {font_size: font_size_val} }
    (data)-> 
      console.log "[hlines.js] element font size saved"
    'json'
    
setLeftTopPos = (element_id_val, element_style_id_val, left_val, top_val) ->
  $.post "/element_styles/"+element_style_id_val, 
        { _method:'PUT', element_style : {element_id: element_id_val, left: left_val, top: top_val} }, 
        (data)-> 
          console.log "[hlines.js] left top pos saved"
        , 'json'
        
setWHSize = (element_id_val, element_style_id_val, width_val, height_val) ->
  $.post "/element_styles/"+element_style_id_val, 
        { _method:'PUT', element_style : {element_id: element_id_val, width: width_val, height: height_val} } 
        (data)-> 
          console.log "[hlines.js] width height size saved"
        'json'
        
setElementContent = (element_id_val, element_content_val) ->
  $.post "/elements/"+element_id_val,
    { _method:'PUT', element : {content: element_content_val} }
    (data)-> 
      console.log "[hlines.js] element content saved"
    'json'

$dialog_bigtext_div = $ '
  <div id="dialog_bigtext" title="Bigtext Settings" style="display: none;">
    <div class="ssPanelHorNav PanelHorNav" style="overflow:hidden;display:block;">
      <div href="#" class="bigtext_settings subPanelButton gg ss">Bigtext Settings</div>
    </div>
    <div class="ggPanelHor ssPanelHor PanelHor" style="position:relative;">
      <div class="settingsPanel" style="width: 100%;">
        <span>Line Height</span><br />
        <div id="slider-elementLineHieght" class="slider"></div>
        <input type="text" id="elementLineHieght" value="" data-elementid="element_id" data-styleid="element_style_id" /><br />
        <span>Letter Spacing</span><br />
        <div id="slider-elementLetterSpacing" class="slider"></div>
        <input type="text" id="elementLetterSpacing" value="" data-elementid="element_id" data-styleid="element_style_id" />
      </div>
    </div>
  </div>
'
    
$controller_div = $ "
<div class='controller'>
  <a class='lock_element'><img src=\"<%= asset_path('images/toolbar-button-lock.png') %>\" /></a>
  <a class='settings_element'><img src=\"<%= asset_path('images/toolbar-button-settings.png') %>\" /></a>
  <a class='zup'><img src='/assets/images/toolbar-button-up.png' /></a>
  <a class='zdown'><img src='/assets/images/toolbar-button-down.png' /></a>
  <a class='delete_element'><img src='/assets/images/toolbar-button-delete.png' /></a>
</div>
"
$bigtext_div_html = $ '
  <div class="element bigtext" data-elementid="1168" data-elementstyleid="1054" data-locked="false" data-pageid="177" id="element_1168" style="left:px;top:px;width:164px;height:34px;font-family: ; font-size: px; z-index: ;" aria-disabled="false">
    <div id="content_1168" class="content" style="width:164px;height:34px;line-height:; letter-spacing:px; font-size:px;">
      A sample bigtext, enter your<br> own text here.
    </div>
  </div>
'
$ ->
  myNicEditor = new nicEditor()
  $panel = $("<div id='myNicPanelBigtext'> </div>")
  $('#pageCanvas').prepend($panel)
  myNicEditor.setPanel('myNicPanelBigtext')
  $('#myNicPanelBigtext').hide()
  isSelectElement = false
  
  $('#add_elem_bigtext').click ->
    #create default text content
    <% sample_text = "A sample bigtext, enter your own text here." %>
    
    $.post "/elements", 
      { _method:'POST', element : {page_id: $('#add_elem_bigtext').data('pageid'), elem_type: 'bigtext', content: '<%= sample_text %>'} }, 
      (data)->
        $bigtext_div_html
          .attr('id','element_'+data.element.id)
          .data('elementid',data.element.id)
          .data('pageid',data.element.page_id)
        $.post "/element_styles", 
          { _method:'POST', element_style : {element_id: data.element.id, width: 164,height: 34} }
          (data)->
            console.log "[hlines.js] added"
            $bigtext_div_html
              .data('elementstyleid',data.element_style.id)
            $('.content',$bigtext_div_html).attr('id','content_'+data.element_style.element_id)  
                      
            $("#pageWrap").append($bigtext_div_html)
            
            $bigtext_div_html.resizable
              alsoResize: $('.content', $bigtext_div_html)
              handles: "n, e, s, w, ne, nw, se, sw"
              disabled: true
              create: (event, ui) ->
                $(this).resizable( "disable" )
              start: (event, ui) ->
              resize: (event, ui) ->
              stop: (event, ui) ->
                element_id_val = $(this).data('elementid')
                element_style_id_val = $(this).data('elementstyleid')
                width_val  = ui.size.width
                height_val = ui.size.height
                setWHSize(element_id_val, element_style_id_val, width_val, height_val)
            .draggable
              #handle: this
              disabled: true
              create: (event, ui) ->
                $(this).draggable( "disable" )
              start: (event, ui) ->
              drag: (event, ui) ->
              stop: (event, ui) ->
                element_id_val = $(this).data('elementid')
                element_style_id_val = $(this).data('elementstyleid')
                left_val = ui.position.left
                top_val = ui.position.top
                setLeftTopPos(element_id_val, element_style_id_val, left_val, top_val)
                
            $bigtext_div_html.bind "resizestop", (event, ui)->
              $curFontSize = parseInt($('.content', $bigtext_div_html).css('fontSize').replace('px', ''))
              element_style_id_val = $bigtext_div_html.data('elementstyleid')
              font_size_val = $curFontSize
              setFontSize(element_style_id_val, font_size_val)
                
            $curFontSize = parseInt($('.content', $bigtext_div_html).css('fontSize').replace('px', ''))
            #$bigtext_div_html.bind "resize", (event, ui)->
            #  $percentageW = (ui.size.width / ui.originalSize.width)
            #  $percentageH = (ui.size.height / ui.originalSize.height)
            #  $percentage = $percentageH
            #  $fontVal = Math.round(parseInt($curFontSize) * $percentage)
            #  $('.content', $bigtext_div_html).css
            #    fontSize: $fontVal
            #    lineHeight: 'normal'

            $bigtext_div_html.bind 'mousedown', ->              
              
              if isSelectElement==false
                isSelectElement = true
                console.log "[hlines.js] set the #pageWrap event on --=val= "+isSelectElement
              $cur_element =  $bigtext_div_html;
              if !$bigtext_div_html.hasClass('cur_selected')
                $('.element').removeClass('cur_selected')
                $('.element').find('.controller').remove()
                if($cur_element.find('.controller').length < 1)
                  console.log "[hlines.js] set isSelectElement = true if($cur_element.find('.controller').length < 1) @ bigtext.js.coffee.erb"
                  console.log isSelectElement
                  console.log "[hlines.js] add class cur_selected and append controller div @ bigtext.js.coffee.erb"
                  $bigtext_div_html.addClass('cur_selected').append($controller_div)
                  $other_elements = $('.element:not(.cur_selected)')
                  
                  console.log "[hlines.js] other_elements resize drag disabled and enabled current element bec it is single click @ bigtext.js.coffee.erb"
                  $other_elements.resizable("option", "disabled", true).draggable("option", "disabled", true)
                  $bigtext_div_html.resizable("option", "disabled", false).draggable("option", "disabled", false)
                          
                  $controller_div.mousedown (event)->
                    event.preventDefault()
                    event.stopPropagation()
                    $target = $(event.target)
                    $element_box = $(this).parents('.element')
                    if $target.is('.zup') || $target.is('.zup img')
                      console.log "[hlines.js] z_index_add_new_elem"
                      cur_zindex = $element_box.css('zIndex')
                      $element_box.css
                        zIndex: parseInt(cur_zindex)+1
                        console.log parseInt(cur_zindex)+1
                        element_id_val = $element.data('elementid')
                        element_style_id_val = $element.data('elementstyleid')
                        zIndex = parseInt(cur_zindex)+1
                        setZindex(element_id_val, element_style_id_val, zIndex)
                        console.log element_id_val
                    else if $target.is('.zdown') || $target.is('.zdown img')
                      console.log "[hlines.js] z_index_subtract_new"
                      cur_zindex = $element_box.css('zIndex')
                      $element_box.css
                        zIndex: parseInt(cur_zindex)-1
                        console.log parseInt(cur_zindex)-1
                        element_id_val = $element.data('elementid')
                        element_style_id_val = $element.data('elementstyleid')
                        zIndex = parseInt(cur_zindex)-1
                        setZindex(element_id_val, element_style_id_val, zIndex)
                    else if $target.is('.delete_element') || $target.is('.delete_element img')
                      element_id_val = $element_box.data('elementid')
                      $element_box.remove()
                      delete_element(element_id_val)
                      console.log "[hlines.js] element_new has been deleted"
                    else if $target.is('.settings_element') || $target.is('.settings_element img')
                      #cur_element.prepend($dialog_bigtext_div.html())
                      #dialog_bigtext_div.dialog
                      # autoOpen: false,
                      # width: 526,
                      # zIndex: 13000,
                      # close: (event, ui) ->
                      #   $dialog_bigtext_div.remove()
                      console.log '[bigtext] nothing'
                      #$settings_div.show("slide", { direction: "right" }, 800)
                      #$('.close_box_settings', $settings_div).click ->
                      #  $settings_div.hide("slide", { direction: "right" }, 800)
                      ##alert "show box settings opt"
                    else if $target.is('.lock_element') || $target.is('.lock_element img')
                      alert('element locked')
              
          'json'
      'json'
      
  $(".element.bigtext").live 'dblclick', (event)->
    $target = $(event.target)
    if $target.is('img', $('.controller'))
      return
    $cur_element = $(this)
    console.log "[hlines.js] [bigtext] show toolbar/panel for editor"
    if $('#myNicPanelBigtext').is(':hidden')
      $('#myNicPanelBigtext').css
        position: 'absolute'
        top: $(window).scrollTop()+'px'
        left: '50%'
        marginLeft: '-305px'
        'z-index': 13000
        width: '610px'
      .show()    
      
    console.log "[hlines.js] set isSelectElement var right"
    if isSelectElement==false
      isSelectElement = true
      console.log "[hlines.js] set the #pageWrap event on --=val= "+isSelectElement
    
    console.log "[hlines.js] check if element has class of editorOn so that it will stop when it is already editoron"
    if $cur_element.hasClass('editorOn')
      console.log "[hlines.js] stop making wisiwig"
      return
      
    $cur_element_content = $('.content', $cur_element)
    
    console.log "[hlines.js] disable drag and resize for the editorOn for cleanliness"
    $cur_element.draggable("option", "disabled", true).resizable("option", "disabled", true)
    
    console.log "[hlines.js] remove controller div for cleanliness"
    $('.controller', $cur_element).remove()
    $other_elements = $('.element:not(.cur_selected)')
    
    console.log "[hlines.js] add class editorOn and remove it for other elements are in active"
    $other_elements.removeClass('editorOn')
    $cur_element.addClass('editorOn')
    
    console.log "[hlines.js] add Instance on editor using .content "+$cur_element_content.attr('id')
    console.log myNicEditor
    myNicEditor.addInstance($cur_element_content.attr('id'))
    console.log myNicEditor
    $cur_element_content.focus();
    
    console.log "[hlines.js] set blur event hundler for editor hide panel and post/removeInstance current element"+$cur_element_content.attr('id')
    myNicEditor.addEvent 'blur', ->
      element_id_val = $cur_element.data('elementid')
      element_content_val = $cur_element_content.html()
      setElementContent(element_id_val, element_content_val)
      if $('#myNicPanelBigtext').is(':visible')
        $('#myNicPanelBigtext').hide()
        
    
    console.log "[hlines.js] [Bigtexts] make text wisiwig"
    $divToTextAreaClone = $('.content',$cur_element)
    $divToTextArea = $('.content',$cur_element)
      
  $(".element.bigtext").each ->
    $cur_element = $(this)
    $curFontSize = parseInt($('.content', $cur_element).css('fontSize').replace('px', ''))
    
    $cur_element.bind "resizestart", (event, ui)->
      $curFontSize = parseInt($('.content', $cur_element).css('fontSize').replace('px', ''))
      console.log "[hlines.js] start"
    $cur_element.bind("resize",resizeBigtext)
    #$cur_element.bind "resize", (event, ui)->
    #  $percentageW = (ui.size.width / ui.originalSize.width)
    #  $percentageH = (ui.size.height / ui.originalSize.height)
    #  $percentage = $percentageH
    #  #$fontVal = Math.round($curFontSize * $percentage)
    #  if $('.content', $cur_element).hasScrollBar()
    #    console.log 'yes scroll resizefont 1'
    #  else
    #    console.log 'no scroll resizefont 1'
    #    $fontVal = Math.round($curFontSize * $percentage)
    #  $('.content', $cur_element).css
    #    fontSize: $fontVal
    #    lineHeight: 'normal'
    #  console.log $curFontSize
    #  console.log $fontVal
    #  console.log $percentage
      
    $cur_element.bind "resizestop", (event, ui)->
      console.log "[hlines.js] stop"
      $curFontSize = parseInt($('.content', $cur_element).css('fontSize').replace('px', ''))
      element_style_id_val = $cur_element.data('elementstyleid')
      font_size_val = $curFontSize
      setFontSize(element_style_id_val, font_size_val)
      
  $('#pageWrap').mousedown (event)->
    if !isSelectElement
      return
    $cur_element = $(this)
    
    $target = $(event.target)
    if $target.is('#pageWrap')
      $('.element').removeClass('cur_selected')
      $('.element').find('.controller').remove()
      $('.element').resizable("option", "disabled", true).draggable("option", "disabled", true)
      isSelectElement = false
      console.log "[hlines.js] set the #pageWrap event on --=val= "+isSelectElement
      
      if( (typeof $menu != 'undefined') && $menu.is(':visible'))
        $menu.hide()
      console.log "[hlines.js] event handled"
      
      $('.element').removeClass('editorOn')
      console.log "[hlines.js] close_box_settings click"
      $('.close_box_settings').trigger('click')
      
  $('.bigtext .settings_element').live 'click', ->
    $cur_bigtext_element = $(this).parents('.element');
    $(this).parents('.element').prepend($dialog_bigtext_div)
    $dialog_bigtext_div.dialog
      autoOpen: false
      width: 526
      zIndex: 13000
      close: (event, ui) ->
        $dialog_bigtext_div.remove()
    #$cur_element_lineheight = $cur_bigtext_element.find('.content').css('line-height')
    #$('#slider-elementLineHieght', $dialog_bigtext_div).slider({
    #  min:0.5,
    #  max:10
    #});
    $dialog_bigtext_div.dialog('open')
    
    $('#slider-elementLineHieght').slider
      min:0,
      max:5,
      value: 1,
      step: .1,
      slide: (event, ui) ->
        val = ui.value
        $('#elementLineHieght',$dialog_bigtext_div).val(val)
      stop: (event, ui) ->
        val = ui.value
        console.log "[hlines.js] upadate line width"
        $('.content', $cur_bigtext_element).css
          "line-height": val
        element_style_id_val = $cur_bigtext_element.data('elementstyleid')
        line_height_val = val
        setLineHeight(element_style_id_val, line_height_val)
        
    $('#elementLineHieght').bind 'change', ->
      $('.content', $cur_bigtext_element).css
        'line-height': $(this).val()
      element_style_id_val = $cur_bigtext_element.data('elementstyleid')
      line_height_val = $(this).val()
      setLineHeight(element_style_id_val, line_height_val)
      
    $('#slider-elementLetterSpacing').slider
      min:0,
      max:5,
      value: 1,
      step: .1,
      slide: (event, ui) ->
        val = ui.value
        $('#elementLetterSpacing',$dialog_bigtext_div).val(val)
      stop: (event, ui) ->
        val = ui.value
        console.log "[hlines.js] upadate line width"
        $('.content', $cur_bigtext_element).css
          "line-height": val
        element_style_id_val = $cur_bigtext_element.data('elementstyleid')
        letter_spacing_val = val
        setLetterSpacing(element_style_id_val, letter_spacing_val)
    $('#elementLetterSpacing').bind 'change', ->
      $('.content', $cur_bigtext_element).css
        'letter-spacing': $(this).val()+'px'
      element_style_id_val = $cur_bigtext_element.data('elementstyleid')
      letter_spacing_val = $(this).val()
      setLetterSpacing(element_style_id_val, letter_spacing_val)
      