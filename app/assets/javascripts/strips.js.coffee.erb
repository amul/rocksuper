#strip html fr each of the strip elements
$strip_element = $ '
<div class="element strip" data-elementid="807" data-elementstyleid="696" data-locked="false" data-pageid="167" id="element_807" style="left:101px;top:109px;width:100%;height:300px;z-index: 9999;">
  <div id="content_807" class="content" style="width:100%;height:300px;">
    <div class="element_strip strip new" style="width: 100%; height: 100%; background-color: #abcabc; background-position: initial initial; background-repeat: initial initial; ">
      <div class="inner_div" style="width: 1100px; height: 100%;">&nbsp;</div>
    </div>
  </div>
</div>
'
$gradient_div = $ '
  <div id="gradientBgColor">&nbsp;</div>
'
$dialog_strip_div = $ '
  <div id="dialog_strip" title="Strip Settings" style="display: none;">
    <div class="ssPanelHorNav PanelHorNav" style="overflow:hidden;display:block;">
      <div href="#" class="strip_settings subPanelButton gg ss" style="width: 100px">Strip Settings</div>
    </div>
    <div class="ggPanelHor ssPanelHor PanelHor" style="position:relative;">
      <div class="settingsPanel" style="width: 100%;">
        <span>Color</span><br />
        <div id="stripBgColorSelector" class="selector_jq"><div style="background-color: #0000ff"></div></div>
        <div id="gradientOptionsStrip" style="display:none;">
          <div id="gradientBgColor" >&nbsp;</div>
          <select id="gradientOrientation">
            <option value="horizontal">Horizontal</option>
            <option value="vertical" selected="selected">Vertical</option>
          </select>
        </div>
        <input type="button" value="Use Gradient" id="useGradientBg" /><br />
        <span>Inner Color</span><br />
        <div id="stripBgColorSelectorInner" class="selector_jq"><div style="background-color: #0000ff"></div></div>
        <span>Border Radius</span><br />        
        <div id="borderRadiusSliderStrip">&nbsp;</div>
        <span>Top Border</span><br />        
        <div id="borderTopSliderStrip">&nbsp;</div>
        <span>Bottom Border</span><br />        
        <div id="borderBottomSliderStrip">&nbsp;</div>
      </div>
    </div>
  </div>
'
#controller fr each of the elements
$controller_div = $ "
<div class='controller'>
  <a class='lock_element'><img src=\"<%= asset_path('images/toolbar-button-lock.png') %>\" /></a>
  <a class='settings_element'><img src=\"<%= asset_path('images/toolbar-button-settings.png') %>\" /></a>
  <a class='zup'><img src='/assets/images/toolbar-button-up.png' /></a>
  <a class='zdown'><img src='/assets/images/toolbar-button-down.png' /></a>
  <a class='delete_element'><img src='/assets/images/toolbar-button-delete.png' /></a>
</div>
"
setZindex = (element_style_id_val, zIndex) ->
  $.post "/element_styles/"+element_style_id_val,
    { _method:'PUT', element_style : {z_index: zIndex} }
    (data)-> 
      console.log "[strips.js] element zindex saved"
    'json'
setLeftTopPos = (element_style_id_val, left_val, top_val) ->
  $.post "/element_styles/"+element_style_id_val, 
        { _method:'PUT', element_style : {left: left_val, top: top_val} }, 
        (data)-> 
          console.log "[strips.js] left top pos saved"
        , 'json'
        
setWHSize = (element_style_id_val, width_val, height_val) ->
  $.post "/element_styles/"+element_style_id_val, 
        { _method:'PUT', element_style : {width: width_val, height: height_val} } 
        (data)-> 
          console.log "[strips.js] width height size saved"
        'json'
        
setElementContent = (element_id_val, element_content_val) ->
  $.post "/elements/"+element_id_val,
    { _method:'PUT', element : {content: element_content_val} }
    (data)-> 
      console.log "[strips.js] element content"
    'json'
    
delete_element = (element_id_val) ->
  $.post "/elements/"+element_id_val,
    { _method:'DELETE', elements : {element_id: element_id_val} }
    (data)-> 
      console.log "[strips.js] deleted element"
    'json'
$ ->
  isSelectElement = false
  
  $.fn.removeStyle = (style) ->
    search = new RegExp(style + '[^;]+;?', 'g')  
    return this.each ->
      $(this).attr 'style', (i, style) ->
        return style.replace(search, '')
          
  $('#add_elem_strip').click ->
    strip_element = "<div class='element_strip strip new_element' style='width:100%;height:100%;background:#abcabc;'><div class='inner_div' style='width: 1100px; height: 100%; margin:0 auto;'>&nbsp;</div></div>"
    $.post "/elements", 
      { _method:'POST', element : {page_id: $('#add_elem_strip').data('pageid'), elem_type: 'strip', content: strip_element} }
      (data)->
        console.log "[strips.js] created element type/block strip div"        
        $.post "/element_styles",
          { _method:'POST', element_style : {element_id: data.element.id, width: 100, height: 300, z_index: 9999} }
          (data)->
            console.log "[strips.js] created a element style"
            #alert data.element_style.element_id
            $strip_element.data('elementid', data.element_style.element_id)
            $strip_element.data('pageid', $('#add_elem_strip').data('pageid'))
            $strip_element.attr('id', 'element_'+data.element_style.element_id)
            $strip_element.data('elementstyleid', data.element_style.id)
            $strip_element.find('.content').attr('id', 'content_'+data.element_style.element_id)
            
            $('#pageWrap').prepend($strip_element)
            $left = 0-(($(window).width()-$('#pageWrap').width())/2)
            $window_width = $(window).width()
            $strip_element.width($window_width).css('left', $left)            
            $strip_element.bind "mousedown", (event)->
              isSelectElement = true
              
              #console.log '[strips.js] make strip_element draggable'
              #$strip_element.draggable({
              #  handle: $strip_element
              #  disabled: true
              #  create: (event, ui) ->
              #  start: (event, ui) ->
              #  drag: (event, ui) ->
              #  stop: (event, ui) ->
              #    element_id_val = $strip_element.data('elementid')
              #    element_style_id_val = $strip_element.data('elementstyleid')
              #    left_val = ui.position.left
              #    top_val = ui.position.top
              #    setLeftTopPos(element_style_id_val, left_val, top_val)
              #}).resizable({
              #  alsoResize: $strip_element.find('.content')
              #  handles: "n, s"
              #  disabled: true
              #  create: (event, ui) ->
              #  start: (event, ui) ->
              #  resize: (event, ui) ->
              #  stop: (event, ui) ->
              #    element_id_val = $(this).data('elementid')
              #    element_style_id_val = $(this).data('elementstyleid')
              #    width_val  = ui.size.width
              #    height_val = ui.size.height
              #    setWHSize(element_style_id_val, width_val, height_val)
              #})
              
              #$strip_element.resizable( "enable" ).draggable( "enable" )
            
              #console.log '[strips.js] remove all selected elements default :disabled'
              #$('.element').removeClass('cur_selected')
              #$('.element').find('.controller').remove()
              #$('.element').resizable("option", "disabled", true).draggable("option", "disabled", true)
              
          'json'          
      'json'
      
  $('.strip.element .content .inner_div').width(1100).css
    "margin": "0 auto 0 auto"
    
  console.log "$(window).width() > $('#pageWrap').width() : " +$(window).width() > $('#pageWrap').width()
  if $(window).width() > $('#pageWrap').width()
    $window_width = $(window).width()
    $left = 0-(($(window).width()-$('#pageWrap').width())/2)
    $('.strip.element')
      .width($window_width)
      .css('left', $left)
    $('.strip.element .content').width($window_width)
  else
    $('.strip.element')
      .width('100%')
      .css('left', 0)
    $('.strip.element .content').width('100%')
    $('.strip.element .content .inner_div').width('100%')
  
  $('.strip.element')
    .resizable( "option", "handles", "n, w" )
    .draggable( "option", "axis", "y" )
    
  $('.strip.element').live 'click', (event) ->
    $target = $(event.target)
    $cur_strip_element = $(this)    
    
    $cur_strip_element.prepend($controller_div)
    $cur_strip_element.resizable
      alsoResize: $('.content', this)
      handles: "n, s"
      disabled: true
      create: (event, ui) ->
        $(this).resizable( "disable" )
      start: (event, ui) ->
      resize: (event, ui) ->
      stop: (event, ui) ->
        element_id_val = $(this).data('elementid')
        element_style_id_val = $(this).data('elementstyleid')
        width_val  = ui.size.width
        height_val = ui.size.height
        setWHSize(element_style_id_val, width_val, height_val)
    .draggable
      handle: this
      disabled: true
      axis: "y"
      create: (event, ui) ->
        $(this).draggable( "disable" )
      start: (event, ui) ->
      drag: (event, ui) ->
      stop: (event, ui) ->
        element_id_val = $(this).data('elementid')
        element_style_id_val = $(this).data('elementstyleid')
        left_val = ui.position.left
        top_val = ui.position.top
        setLeftTopPos(element_style_id_val, left_val, top_val)
    $cur_strip_element.resizable( "enable" ).draggable( "enable" )
    $('.ui-resizable-ne, .ui-resizable-nw, .ui-resizable-e, .ui-resizable-w, .ui-resizable-se, .ui-resizable-sw', $cur_strip_element).hide()
    $('.element').removeClass('cur_selected')
    $cur_strip_element.addClass('cur_selected')
    
    $cur_element = $cur_strip_element
    $controller_div.bind 'mousedown', (event)->
      event.preventDefault()
      event.stopPropagation()
      $target = $(event.target)
      if $target.is('.zup') || $target.is('.zup img')
        console.log "z_index_add"
        cur_zindex = $(this).parents('.element').css('zIndex')
        $(this).parents('.element').css
          zIndex: parseInt(cur_zindex)+1
          console.log parseInt(cur_zindex)+1
          element_id_val = $cur_element.data('elementid')
          element_style_id_val = $cur_element.data('elementstyleid')
          zIndex = parseInt(cur_zindex)+1
          setZindex(element_style_id_val, zIndex)
      else if $target.is('.zdown') || $target.is('.zdown img')
        console.log "z_index_subtract"
        cur_zindex = $(this).parents('.element').css('zIndex')
        $(this).parents('.element').css
          zIndex: parseInt(cur_zindex)-1
          console.log parseInt(cur_zindex)-1
          element_id_val = $cur_element.data('elementid')
          element_style_id_val = $cur_element.data('elementstyleid')
          zIndex = parseInt(cur_zindex)-1
          setZindex(element_style_id_val, zIndex)
      else if $target.is('.delete_element') || $target.is('.delete_element img')
        element_id_val = $(this).parents('.element').data('elementid')
        $(this).parents('.element').remove()
        delete_element(element_id_val)
        console.log "element has been deleted (not callback)"
      else if $target.is('.settings_element') || $target.is('.settings_element img')
        $cur_element.trigger('dblclick')
      else if $target.is('.lock_element') || $target.is('.lock_element img')
        if $cur_element.hasClass('locked')
          $cur_element.removeClass('locked')
          console.log "unlocked element "+$cur_element.attr('id')
          $cur_element.draggable("option", "disabled", false).resizable("option", "disabled", false)
        else
          $cur_element.addClass('locked')
          $cur_element.draggable("option", "disabled", true).resizable("option", "disabled", false)
          console.log "locked element "+$cur_element.attr('id')
    
  $('.strip.element').live 'dblclick', ->
    $cur_strip_element = $(this);
    $(this).parents('.element').prepend($dialog_strip_div)
    #$(this).prepend($dialog_strip_div)
    $dialog_strip_div.dialog
      autoOpen: false
      width: 526
      zIndex: 13000
      close: (event, ui) ->
        $dialog_strip_div.remove()
        element_id_val = $cur_strip_element.data('elementid')
        element_content_val = $('.content', $cur_strip_element).html()
        setElementContent(element_id_val, element_content_val)
        
    $('#useGradientBg',$dialog_strip_div).bind 'click', ->
      $cur_button = $(this)
      if $('#gradientBgColor',$dialog_strip_div).data('gradientCreator')
        console.log 'yes'
      else
        console.log 'no'
      if $cur_button.val() == "Use Gradient"
        $('#gradientOptionsStrip').attr('style', 'display:block;')
        $('#stripBgColorSelector').attr('style', 'display:none;')
        $('#gradientBgColor').gradientCreator
          gradient: '#ebf1f6 0%,#abd3ee 50%,#89c3eb 51%,#d5ebfb 100%',
          target: $('.element_strip.strip', $cur_strip_element),
          tooltipGradient: ' #fceabb 0%,#fccd4d 49%,#f8b500 53%,#fbdf93 100%'
          onChange: (stringGradient,cssGradient,ArrayColors) ->
            console.log 'stringGradient val: '+stringGradient
            console.log 'cssGradient val: '+cssGradient
        $cur_button.val('Solid Color')
      else
        $('.element_strip.strip', $cur_strip_element).removeStyle('background')
        $('.element_strip.strip', $cur_strip_element).css
          'background': '#89c4eb'
        $('#gradientOptionsStrip').attr('style', 'display:none;')
        $('#stripBgColorSelector').attr('style', 'display:block;')
        $cur_button.val('Use Gradient')
      
      $('#gradientOrientation').bind 'change', ->
        $('#gradientBgColor').data('gradientCreator').setOrientation $(this).val()
        
    $('#stripBgColorSelector').ColorPicker
      color: '#0000ff'
      onChange: (hsb, hex, rgb)->
        $('.content div.element_strip', $cur_strip_element).css
          'backgroundColor': '#'+hex
      onSubmit: (hsb, hex, rgb, el) ->
        console.log el
        $(el).val(hex)
        $(el).ColorPickerHide()
        element_id_val = $cur_strip_element.data('elementid')
        element_content_val = $('.content', $cur_strip_element).html()
        setElementContent(element_id_val, element_content_val)
        
    $('#stripBgColorSelectorInner').ColorPicker
      color: '#0000ff'
      onChange: (hsb, hex, rgb)->
        $('.content div.element_strip .inner_div', $cur_strip_element).css
          'backgroundColor': '#'+hex
      onSubmit: (hsb, hex, rgb, el) ->
        console.log el
        $(el).val(hex)
        $(el).ColorPickerHide()
        element_id_val = $cur_strip_element.data('elementid')
        element_content_val = $('.content', $cur_strip_element).html()
        setElementContent(element_id_val, element_content_val)
          
    $('#borderRadiusSliderStrip').slider
      min:1,
      max:100,
      value: 1,
      slide: (event, ui) ->
        val = ui.value
      stop: (event, ui) ->
        val = ui.value
        console.log "upadate border radius"
        $('.content .inner_div', $cur_strip_element).animate {
          "borderRadius": val
          },
          900
          ->
            element_id_val = $cur_strip_element.data('elementid')
            element_content_val = $('.content', $cur_strip_element).html()
            setElementContent(element_id_val, element_content_val)
            
    $('#borderTopSliderStrip').slider
      min:0,
      max:30,
      value: 1,
      slide: (event, ui) ->
        val = ui.value
      stop: (event, ui) ->
        val = ui.value
        console.log "[strips.js] upadate border Top"
        $('.content .element_strip.strip', $cur_strip_element).css
          "borderTop": val+"px solid #000000"
        element_id_val = $cur_strip_element.data('elementid')
        element_content_val = $('.content', $cur_strip_element).html()
        setElementContent(element_id_val, element_content_val)
            
    $('#borderBottomSliderStrip').slider
      min:0,
      max:30,
      value: 1,
      slide: (event, ui) ->
        val = ui.value
      stop: (event, ui) ->
        val = ui.value
        console.log "[strips.js] upadate border Bottom"
        $('.content .element_strip.strip', $cur_strip_element).css
          "borderBottom": val+"px solid #000000"
        element_id_val = $cur_strip_element.data('elementid')
        element_content_val = $('.content', $cur_strip_element).html()
        setElementContent(element_id_val, element_content_val)
    $dialog_strip_div.dialog('open')